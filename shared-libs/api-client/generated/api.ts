/* tslint:disable */
/* eslint-disable */
/**
 * Cinema Ticket Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CinemaResponse
 */
export interface CinemaResponse {
    /**
     * UID кинотеатра
     * @type {string}
     * @memberof CinemaResponse
     */
    'cinemaUid'?: string;
    /**
     * Название кинотеатра
     * @type {string}
     * @memberof CinemaResponse
     */
    'name'?: string;
    /**
     * Адрес кинотеатра
     * @type {string}
     * @memberof CinemaResponse
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface CinemaWithPaginationResponse
 */
export interface CinemaWithPaginationResponse {
    /**
     * Номер страницы
     * @type {number}
     * @memberof CinemaWithPaginationResponse
     */
    'page'?: number;
    /**
     * Количество элементов на странице
     * @type {number}
     * @memberof CinemaWithPaginationResponse
     */
    'pageSize'?: number;
    /**
     * Общее количество элементов
     * @type {number}
     * @memberof CinemaWithPaginationResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {Array<CinemaResponse>}
     * @memberof CinemaWithPaginationResponse
     */
    'items'?: Array<CinemaResponse>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Информация об ошибке
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface FilmResponse
 */
export interface FilmResponse {
    /**
     * UID фильма
     * @type {string}
     * @memberof FilmResponse
     */
    'filmUid'?: string;
    /**
     * Название фильма
     * @type {string}
     * @memberof FilmResponse
     */
    'name'?: string;
    /**
     * Рейтинг фильма на IMDB
     * @type {number}
     * @memberof FilmResponse
     */
    'rating'?: number;
    /**
     * Режиссер
     * @type {string}
     * @memberof FilmResponse
     */
    'director'?: string;
    /**
     * Продюссер
     * @type {string}
     * @memberof FilmResponse
     */
    'producer'?: string;
    /**
     * Жанр
     * @type {string}
     * @memberof FilmResponse
     */
    'genre'?: string;
}
/**
 * 
 * @export
 * @interface FilmsInCinemaResponse
 */
export interface FilmsInCinemaResponse {
    /**
     * UID кинотеатра
     * @type {string}
     * @memberof FilmsInCinemaResponse
     */
    'cinemaUid'?: string;
    /**
     * Название кинотеатра
     * @type {string}
     * @memberof FilmsInCinemaResponse
     */
    'name'?: string;
    /**
     * Адрес кинотеатра
     * @type {string}
     * @memberof FilmsInCinemaResponse
     */
    'address'?: string;
    /**
     * 
     * @type {Array<FilmResponse>}
     * @memberof FilmsInCinemaResponse
     */
    'films'?: Array<FilmResponse>;
}
/**
 * 
 * @export
 * @interface FilmsWithPaginationResponse
 */
export interface FilmsWithPaginationResponse {
    /**
     * Номер страницы
     * @type {number}
     * @memberof FilmsWithPaginationResponse
     */
    'page'?: number;
    /**
     * Количество элементов на странице
     * @type {number}
     * @memberof FilmsWithPaginationResponse
     */
    'pageSize'?: number;
    /**
     * Общее количество элементов
     * @type {number}
     * @memberof FilmsWithPaginationResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {Array<FilmResponse>}
     * @memberof FilmsWithPaginationResponse
     */
    'items'?: Array<FilmResponse>;
}
/**
 * 
 * @export
 * @interface TicketPurchaseRequest
 */
export interface TicketPurchaseRequest {
    /**
     * Дата сеанса
     * @type {string}
     * @memberof TicketPurchaseRequest
     */
    'date'?: string;
    /**
     * Ряд
     * @type {number}
     * @memberof TicketPurchaseRequest
     */
    'row'?: number;
    /**
     * Место в зале
     * @type {number}
     * @memberof TicketPurchaseRequest
     */
    'seat'?: number;
}
/**
 * 
 * @export
 * @interface TicketResponse
 */
export interface TicketResponse {
    /**
     * Дата сеанса
     * @type {string}
     * @memberof TicketResponse
     */
    'date'?: string;
    /**
     * Ряд
     * @type {number}
     * @memberof TicketResponse
     */
    'row'?: number;
    /**
     * Место в зале
     * @type {number}
     * @memberof TicketResponse
     */
    'seat'?: number;
}

/**
 * CinemaServiceApi - axios parameter creator
 * @export
 */
export const CinemaServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Просмотр афиши выбранного кинотеатра
         * @param {string} cinemaUid UUID кинотеатра
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CinemaCinemaUidFilmsGet: async (cinemaUid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cinemaUid' is not null or undefined
            assertParamExists('apiV1CinemaCinemaUidFilmsGet', 'cinemaUid', cinemaUid)
            const localVarPath = `/api/v1/cinema/{cinemaUid}/films`
                .replace(`{${"cinemaUid"}}`, encodeURIComponent(String(cinemaUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Просмотр списка всех кинотеатров
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CinemaGet: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cinema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CinemaServiceApi - functional programming interface
 * @export
 */
export const CinemaServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CinemaServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Просмотр афиши выбранного кинотеатра
         * @param {string} cinemaUid UUID кинотеатра
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CinemaCinemaUidFilmsGet(cinemaUid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilmsInCinemaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CinemaCinemaUidFilmsGet(cinemaUid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Просмотр списка всех кинотеатров
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CinemaGet(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CinemaWithPaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CinemaGet(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CinemaServiceApi - factory interface
 * @export
 */
export const CinemaServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CinemaServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Просмотр афиши выбранного кинотеатра
         * @param {string} cinemaUid UUID кинотеатра
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CinemaCinemaUidFilmsGet(cinemaUid: string, options?: any): AxiosPromise<FilmsInCinemaResponse> {
            return localVarFp.apiV1CinemaCinemaUidFilmsGet(cinemaUid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Просмотр списка всех кинотеатров
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CinemaGet(page?: number, size?: number, options?: any): AxiosPromise<CinemaWithPaginationResponse> {
            return localVarFp.apiV1CinemaGet(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CinemaServiceApi - object-oriented interface
 * @export
 * @class CinemaServiceApi
 * @extends {BaseAPI}
 */
export class CinemaServiceApi extends BaseAPI {
    /**
     * 
     * @summary Просмотр афиши выбранного кинотеатра
     * @param {string} cinemaUid UUID кинотеатра
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemaServiceApi
     */
    public apiV1CinemaCinemaUidFilmsGet(cinemaUid: string, options?: AxiosRequestConfig) {
        return CinemaServiceApiFp(this.configuration).apiV1CinemaCinemaUidFilmsGet(cinemaUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Просмотр списка всех кинотеатров
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemaServiceApi
     */
    public apiV1CinemaGet(page?: number, size?: number, options?: AxiosRequestConfig) {
        return CinemaServiceApiFp(this.configuration).apiV1CinemaGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilmsServiceApi - axios parameter creator
 * @export
 */
export const FilmsServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Просмотр списка всех фильмов, которые идут сегодня в кино
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilmsGet: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/films`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilmsServiceApi - functional programming interface
 * @export
 */
export const FilmsServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilmsServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Просмотр списка всех фильмов, которые идут сегодня в кино
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilmsGet(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilmsWithPaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilmsGet(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilmsServiceApi - factory interface
 * @export
 */
export const FilmsServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilmsServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Просмотр списка всех фильмов, которые идут сегодня в кино
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilmsGet(page?: number, size?: number, options?: any): AxiosPromise<FilmsWithPaginationResponse> {
            return localVarFp.apiV1FilmsGet(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilmsServiceApi - object-oriented interface
 * @export
 * @class FilmsServiceApi
 * @extends {BaseAPI}
 */
export class FilmsServiceApi extends BaseAPI {
    /**
     * 
     * @summary Просмотр списка всех фильмов, которые идут сегодня в кино
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsServiceApi
     */
    public apiV1FilmsGet(page?: number, size?: number, options?: AxiosRequestConfig) {
        return FilmsServiceApiFp(this.configuration).apiV1FilmsGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TicketServiceApi - axios parameter creator
 * @export
 */
export const TicketServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Покупка билета
         * @param {string} xUserName Имя пользователя
         * @param {string} cinemaUid UUID кинотеатра
         * @param {string} filmUid UUID фильма
         * @param {TicketPurchaseRequest} [ticketPurchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsCinemaCinemaUidFilmsFilmUidPost: async (xUserName: string, cinemaUid: string, filmUid: string, ticketPurchaseRequest?: TicketPurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUserName' is not null or undefined
            assertParamExists('apiV1TicketsCinemaCinemaUidFilmsFilmUidPost', 'xUserName', xUserName)
            // verify required parameter 'cinemaUid' is not null or undefined
            assertParamExists('apiV1TicketsCinemaCinemaUidFilmsFilmUidPost', 'cinemaUid', cinemaUid)
            // verify required parameter 'filmUid' is not null or undefined
            assertParamExists('apiV1TicketsCinemaCinemaUidFilmsFilmUidPost', 'filmUid', filmUid)
            const localVarPath = `/api/v1/tickets/cinema/{cinemaUid}/films/{filmUid}`
                .replace(`{${"cinemaUid"}}`, encodeURIComponent(String(cinemaUid)))
                .replace(`{${"filmUid"}}`, encodeURIComponent(String(filmUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUserName != null) {
                localVarHeaderParameter['X-User-Name'] = String(xUserName);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticketPurchaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Возврат билета
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsTicketUidDelete: async (ticketUid: string, xUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketUid' is not null or undefined
            assertParamExists('apiV1TicketsTicketUidDelete', 'ticketUid', ticketUid)
            // verify required parameter 'xUserName' is not null or undefined
            assertParamExists('apiV1TicketsTicketUidDelete', 'xUserName', xUserName)
            const localVarPath = `/api/v1/tickets/{ticketUid}`
                .replace(`{${"ticketUid"}}`, encodeURIComponent(String(ticketUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUserName != null) {
                localVarHeaderParameter['X-User-Name'] = String(xUserName);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Информация по конкретному билету
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsTicketUidGet: async (ticketUid: string, xUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketUid' is not null or undefined
            assertParamExists('apiV1TicketsTicketUidGet', 'ticketUid', ticketUid)
            // verify required parameter 'xUserName' is not null or undefined
            assertParamExists('apiV1TicketsTicketUidGet', 'xUserName', xUserName)
            const localVarPath = `/api/v1/tickets/{ticketUid}`
                .replace(`{${"ticketUid"}}`, encodeURIComponent(String(ticketUid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xUserName != null) {
                localVarHeaderParameter['X-User-Name'] = String(xUserName);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketServiceApi - functional programming interface
 * @export
 */
export const TicketServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Покупка билета
         * @param {string} xUserName Имя пользователя
         * @param {string} cinemaUid UUID кинотеатра
         * @param {string} filmUid UUID фильма
         * @param {TicketPurchaseRequest} [ticketPurchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName: string, cinemaUid: string, filmUid: string, ticketPurchaseRequest?: TicketPurchaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName, cinemaUid, filmUid, ticketPurchaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Возврат билета
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TicketsTicketUidDelete(ticketUid: string, xUserName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TicketsTicketUidDelete(ticketUid, xUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Информация по конкретному билету
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TicketsTicketUidGet(ticketUid: string, xUserName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TicketsTicketUidGet(ticketUid, xUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketServiceApi - factory interface
 * @export
 */
export const TicketServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Покупка билета
         * @param {string} xUserName Имя пользователя
         * @param {string} cinemaUid UUID кинотеатра
         * @param {string} filmUid UUID фильма
         * @param {TicketPurchaseRequest} [ticketPurchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName: string, cinemaUid: string, filmUid: string, ticketPurchaseRequest?: TicketPurchaseRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName, cinemaUid, filmUid, ticketPurchaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Возврат билета
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsTicketUidDelete(ticketUid: string, xUserName: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1TicketsTicketUidDelete(ticketUid, xUserName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Информация по конкретному билету
         * @param {string} ticketUid UUID билета
         * @param {string} xUserName Имя пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TicketsTicketUidGet(ticketUid: string, xUserName: string, options?: any): AxiosPromise<TicketResponse> {
            return localVarFp.apiV1TicketsTicketUidGet(ticketUid, xUserName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketServiceApi - object-oriented interface
 * @export
 * @class TicketServiceApi
 * @extends {BaseAPI}
 */
export class TicketServiceApi extends BaseAPI {
    /**
     * 
     * @summary Покупка билета
     * @param {string} xUserName Имя пользователя
     * @param {string} cinemaUid UUID кинотеатра
     * @param {string} filmUid UUID фильма
     * @param {TicketPurchaseRequest} [ticketPurchaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName: string, cinemaUid: string, filmUid: string, ticketPurchaseRequest?: TicketPurchaseRequest, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).apiV1TicketsCinemaCinemaUidFilmsFilmUidPost(xUserName, cinemaUid, filmUid, ticketPurchaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Возврат билета
     * @param {string} ticketUid UUID билета
     * @param {string} xUserName Имя пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public apiV1TicketsTicketUidDelete(ticketUid: string, xUserName: string, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).apiV1TicketsTicketUidDelete(ticketUid, xUserName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Информация по конкретному билету
     * @param {string} ticketUid UUID билета
     * @param {string} xUserName Имя пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public apiV1TicketsTicketUidGet(ticketUid: string, xUserName: string, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).apiV1TicketsTicketUidGet(ticketUid, xUserName, options).then((request) => request(this.axios, this.basePath));
    }
}


